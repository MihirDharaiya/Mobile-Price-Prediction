# -*- coding: utf-8 -*-
"""Mobile Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18jBONs-BguVA0oYkvNNxMqOBBdn6SXtG
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('mobiles.csv')

df.head()

sns.set(rc = {'figure.figsize':(15,8)})
sns.heatmap(df.corr(),annot=True)
plt.show()

df.info()

df = df[['Price in India','RAM','Resolution','Processor','Battery capacity (mAh)','Internal storage','Expandable storage up to (GB)','Screen size (inches)']]

100* df.isnull().sum() / len(df)

df[df['RAM'].isnull()]

df['RAM'] = df['RAM'].str.replace("GB", "")
df['RAM'] = df['RAM'].str.replace("MB", "")
df['RAM'] = df['RAM'].astype('float')

df['RAM'].value_counts()

df = (df[df['RAM'] <= 16.0]) 
df = (df[df['RAM'] >= 2.0])

df['RAM'].value_counts()

from sklearn.impute import SimpleImputer
missingvalues = SimpleImputer(missing_values = np.NaN,strategy='median')
x = df.iloc[:,1].values
x = x.reshape(-1,1)
df.iloc[:,1] = missingvalues.fit_transform(x)

sns.set(rc = {'figure.figsize':(12,8)})
sns.heatmap(df.corr(),annot=True)
plt.show()

df['Expandable storage up to (GB)'] = df['Expandable storage up to (GB)'].str.replace("GB", "")
df['Expandable storage up to (GB)'] = df['Expandable storage up to (GB)'].str.replace("TB", "")
df['Expandable storage up to (GB)'] = df['Expandable storage up to (GB)'].astype('float')

df.head()

df['Internal storage'] = df['Internal storage'].str.replace("GB", "")
df['Internal storage'] = df['Internal storage'].str.replace("MB", "")
df['Internal storage'] = df['Internal storage'].astype('float')

df.describe()

df['Price in India'] = df['Price in India'].str.replace("â‚¹ ", "")
df['Price in India'] = df['Price in India'].str.replace(",", "")
df['Price in India'] = df['Price in India'].astype('float')

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
for i in range(1,8):
    y = df.iloc[:,i].values
    df.iloc[:,i] = labelencoder.fit_transform(y)
    x = y.reshape(-1,1)

df.describe()

df.describe()

df.isnull().sum()

df = df.dropna(subset=['Price in India'])

df.isnull().sum()

sns.set(rc = {'figure.figsize':(12,8)})
sns.heatmap(df.corr(),annot=True)
plt.show()

sns.set(rc = {'figure.figsize':(12,8)})
sns.heatmap(df.corr(),annot=True)
plt.show()

# df = df.drop(columns=['Resolution'])

sns.set(rc = {'figure.figsize':(12,8)})
sns.heatmap(df.corr(),annot=True)
plt.show()

X = df[['RAM','Processor','Battery capacity (mAh)','Internal storage','Expandable storage up to (GB)','Screen size (inches)']]
y = df[['Price in India']]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)

from sklearn import linear_model
reg = linear_model.LinearRegression()
reg.fit(X_train,y_train)

reg.score(X_test,y_test)

reg.coef_

reg.predict(X_test)

from scipy.stats import norm
from scipy import stats
sns.distplot(df['Price in India'], fit=norm);
fig = plt.figure()
res = stats.probplot(df['Price in India'], plot=plt)

# df[df['RAM'] <= 16]

from sklearn.tree import DecisionTreeRegressor 
regressor = DecisionTreeRegressor(random_state = 0) 
regressor.fit(X_train, y_train)

# predicting a new value
  
# test the output by changing values, like 3750
y_pred = regressor.predict(X_test)
y_pred

regressor.score(X_test,y_test)

from sklearn.metrics import mean_absolute_error,mean_squared_error
MAE = mean_absolute_error(y_test,y_pred)
MSE = mean_squared_error(y_test,y_pred)
RMSE = np.sqrt(MSE)

RMSE

df['Price in India'].mean()

from sklearn import tree
tree.plot_tree(regressor,max_depth=2)
plt.show()

from sklearn.ensemble import RandomForestRegressor
forest = RandomForestRegressor(n_estimators = 100, random_state = 0)
forest.fit(X_train, y_train)

y_pred_forest = forest.predict(X_test)

y_pred_forest

forest.score(X_test,y_test)

MAE = mean_absolute_error(y_test,y_pred_forest)
MSE = mean_squared_error(y_test,y_pred_forest)
RMSE = np.sqrt(MSE)

RMSE

from sklearn.svm import SVR
reg_svr = SVR(kernel='linear')
reg_svr.fit(X_train, y_train)

y_pred_svr = reg_svr.predict(X_test)

y_pred_svr

reg_svr.score(X_test,y_test)

# X = df[['RAM','Processor','Battery capacity (mAh)','Internal storage','Expandable storage up to (GB)','Screen size (inches)']]
forest.predict([[4,44,105,3,8,45]])